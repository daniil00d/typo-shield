// Generated from /Users/d.shenyagin/TypoShield/src/antlr-ts-compiler/grammar/TypoShield.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class TypoShieldLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly DIR_TYPE = 2;
	public static readonly START_SYM = 3;
	public static readonly PROTOCOL_START = 4;
	public static readonly PROTOCOL = 5;
	public static readonly METHOD = 6;
	public static readonly LCURLY = 7;
	public static readonly RCURLY = 8;
	public static readonly SEMI = 9;
	public static readonly COMA = 10;
	public static readonly WS = 11;
	public static readonly TYPE = 12;
	public static readonly DIR_NAME = 13;
	public static readonly DIRECTIVE = 14;
	public static readonly ENDPOINT_NAME = 15;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "DIR_TYPE", "START_SYM", "PROTOCOL_START", "PROTOCOL", "METHOD", 
		"LCURLY", "RCURLY", "SEMI", "COMA", "WS", "TYPE", "DIR_NAME", "DIRECTIVE", 
		"ENDPOINT_NAME",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':'", "'JSON'", "'>'", "'$'", "'HTTP'", undefined, "'{'", 
		"'}'", "';'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "DIR_TYPE", "START_SYM", "PROTOCOL_START", "PROTOCOL", 
		"METHOD", "LCURLY", "RCURLY", "SEMI", "COMA", "WS", "TYPE", "DIR_NAME", 
		"DIRECTIVE", "ENDPOINT_NAME",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TypoShieldLexer._LITERAL_NAMES, TypoShieldLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TypoShieldLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(TypoShieldLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TypoShield.g4"; }

	// @Override
	public get ruleNames(): string[] { return TypoShieldLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return TypoShieldLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return TypoShieldLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return TypoShieldLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x11v\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07?" +
		"\n\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x06\fJ\n" +
		"\f\r\f\x0E\fK\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x05\r\\\n\r\x03\x0E\x03\x0E\x06\x0E`\n\x0E" +
		"\r\x0E\x0E\x0Ea\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0Fp\n\x0F\x03\x10\x06\x10" +
		"s\n\x10\r\x10\x0E\x10t\x02\x02\x02\x11\x03\x02\x03\x05\x02\x04\x07\x02" +
		"\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02" +
		"\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11\x03\x02\x06" +
		"\x05\x02\v\f\x0E\x0F\"\"\x03\x02C\\\x04\x02C\\c|\x03\x02c|\x02|\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x03!\x03" +
		"\x02\x02\x02\x05#\x03\x02\x02\x02\x07(\x03\x02\x02\x02\t*\x03\x02\x02" +
		"\x02\v,\x03\x02\x02\x02\r>\x03\x02\x02\x02\x0F@\x03\x02\x02\x02\x11B\x03" +
		"\x02\x02\x02\x13D\x03\x02\x02\x02\x15F\x03\x02\x02\x02\x17I\x03\x02\x02" +
		"\x02\x19[\x03\x02\x02\x02\x1B]\x03\x02\x02\x02\x1Do\x03\x02\x02\x02\x1F" +
		"r\x03\x02\x02\x02!\"\x07<\x02\x02\"\x04\x03\x02\x02\x02#$\x07L\x02\x02" +
		"$%\x07U\x02\x02%&\x07Q\x02\x02&\'\x07P\x02\x02\'\x06\x03\x02\x02\x02(" +
		")\x07@\x02\x02)\b\x03\x02\x02\x02*+\x07&\x02\x02+\n\x03\x02\x02\x02,-" +
		"\x07J\x02\x02-.\x07V\x02\x02./\x07V\x02\x02/0\x07R\x02\x020\f\x03\x02" +
		"\x02\x0212\x07I\x02\x0223\x07G\x02\x023?\x07V\x02\x0245\x07R\x02\x025" +
		"6\x07Q\x02\x0267\x07U\x02\x027?\x07V\x02\x0289\x07F\x02\x029:\x07G\x02" +
		"\x02:;\x07N\x02\x02;<\x07G\x02\x02<=\x07V\x02\x02=?\x07G\x02\x02>1\x03" +
		"\x02\x02\x02>4\x03\x02\x02\x02>8\x03\x02\x02\x02?\x0E\x03\x02\x02\x02" +
		"@A\x07}\x02\x02A\x10\x03\x02\x02\x02BC\x07\x7F\x02\x02C\x12\x03\x02\x02" +
		"\x02DE\x07=\x02\x02E\x14\x03\x02\x02\x02FG\x07.\x02\x02G\x16\x03\x02\x02" +
		"\x02HJ\t\x02\x02\x02IH\x03\x02\x02\x02JK\x03\x02\x02\x02KI\x03\x02\x02" +
		"\x02KL\x03\x02\x02\x02LM\x03\x02\x02\x02MN\b\f\x02\x02N\x18\x03\x02\x02" +
		"\x02OP\x07P\x02\x02PQ\x07w\x02\x02QR\x07o\x02\x02RS\x07d\x02\x02ST\x07" +
		"g\x02\x02T\\\x07t\x02\x02UV\x07U\x02\x02VW\x07v\x02\x02WX\x07t\x02\x02" +
		"XY\x07k\x02\x02YZ\x07p\x02\x02Z\\\x07i\x02\x02[O\x03\x02\x02\x02[U\x03" +
		"\x02\x02\x02\\\x1A\x03\x02\x02\x02]_\t\x03\x02\x02^`\t\x04\x02\x02_^\x03" +
		"\x02\x02\x02`a\x03\x02\x02\x02a_\x03\x02\x02\x02ab\x03\x02\x02\x02b\x1C" +
		"\x03\x02\x02\x02cd\x07B\x02\x02de\x07u\x02\x02ef\x07g\x02\x02fg\x07t\x02" +
		"\x02gh\x07x\x02\x02hp\x07g\x02\x02ij\x07B\x02\x02jk\x07k\x02\x02kl\x07" +
		"p\x02\x02lm\x07r\x02\x02mn\x07w\x02\x02np\x07v\x02\x02oc\x03\x02\x02\x02" +
		"oi\x03\x02\x02\x02p\x1E\x03\x02\x02\x02qs\t\x05\x02\x02rq\x03\x02\x02" +
		"\x02st\x03\x02\x02\x02tr\x03\x02\x02\x02tu\x03\x02\x02\x02u \x03\x02\x02" +
		"\x02\t\x02>K[aot\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TypoShieldLexer.__ATN) {
			TypoShieldLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TypoShieldLexer._serializedATN));
		}

		return TypoShieldLexer.__ATN;
	}

}

