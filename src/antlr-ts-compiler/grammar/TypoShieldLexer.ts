// Generated from /Users/d.shenyagin/TypoShield/src/antlr-ts-compiler/grammar/TypoShield.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class TypoShieldLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly DIR_TYPE = 2;
	public static readonly START_SYM = 3;
	public static readonly METHOD_START = 4;
	public static readonly PROTOCOL = 5;
	public static readonly PROTOCOL_VERSION = 6;
	public static readonly PROTOCOL_VERSION_DEL = 7;
	public static readonly METHOD = 8;
	public static readonly LCURLY = 9;
	public static readonly RCURLY = 10;
	public static readonly SEMI = 11;
	public static readonly COMA = 12;
	public static readonly WS = 13;
	public static readonly TYPE = 14;
	public static readonly DIR_NAME = 15;
	public static readonly DIRECTIVE = 16;
	public static readonly ENDPOINT_NAME = 17;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "DIR_TYPE", "START_SYM", "METHOD_START", "PROTOCOL", "PROTOCOL_VERSION", 
		"PROTOCOL_VERSION_DEL", "METHOD", "LCURLY", "RCURLY", "SEMI", "COMA", 
		"WS", "TYPE", "DIR_NAME", "DIRECTIVE", "ENDPOINT_NAME",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':'", "'JSON'", "'>'", "'$'", "'HTTP'", undefined, "'/'", 
		undefined, "'{'", "'}'", "';'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "DIR_TYPE", "START_SYM", "METHOD_START", "PROTOCOL", 
		"PROTOCOL_VERSION", "PROTOCOL_VERSION_DEL", "METHOD", "LCURLY", "RCURLY", 
		"SEMI", "COMA", "WS", "TYPE", "DIR_NAME", "DIRECTIVE", "ENDPOINT_NAME",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TypoShieldLexer._LITERAL_NAMES, TypoShieldLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TypoShieldLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(TypoShieldLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TypoShield.g4"; }

	// @Override
	public get ruleNames(): string[] { return TypoShieldLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return TypoShieldLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return TypoShieldLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return TypoShieldLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x13\x82\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x05\x07:\n\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x05\tK\n\t\x03" +
		"\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x06\x0EV\n\x0E\r" +
		"\x0E\x0E\x0EW\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0Fh\n\x0F" +
		"\x03\x10\x03\x10\x06\x10l\n\x10\r\x10\x0E\x10m\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x05\x11|\n\x11\x03\x12\x06\x12\x7F\n\x12\r\x12\x0E\x12\x80\x02\x02\x02" +
		"\x13\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
		"\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13\x03\x02\x07\x03\x022;\x05\x02" +
		"\v\f\x0E\x0F\"\"\x03\x02C\\\x04\x02C\\c|\x03\x02c|\x02\x89\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x05\'\x03\x02\x02\x02" +
		"\x07,\x03\x02\x02\x02\t.\x03\x02\x02\x02\v0\x03\x02\x02\x02\r9\x03\x02" +
		"\x02\x02\x0F;\x03\x02\x02\x02\x11J\x03\x02\x02\x02\x13L\x03\x02\x02\x02" +
		"\x15N\x03\x02\x02\x02\x17P\x03\x02\x02\x02\x19R\x03\x02\x02\x02\x1BU\x03" +
		"\x02\x02\x02\x1Dg\x03\x02\x02\x02\x1Fi\x03\x02\x02\x02!{\x03\x02\x02\x02" +
		"#~\x03\x02\x02\x02%&\x07<\x02\x02&\x04\x03\x02\x02\x02\'(\x07L\x02\x02" +
		"()\x07U\x02\x02)*\x07Q\x02\x02*+\x07P\x02\x02+\x06\x03\x02\x02\x02,-\x07" +
		"@\x02\x02-\b\x03\x02\x02\x02./\x07&\x02\x02/\n\x03\x02\x02\x0201\x07J" +
		"\x02\x0212\x07V\x02\x0223\x07V\x02\x0234\x07R\x02\x024\f\x03\x02\x02\x02" +
		"56\t\x02\x02\x0267\v\x02\x02\x027:\t\x02\x02\x028:\t\x02\x02\x0295\x03" +
		"\x02\x02\x0298\x03\x02\x02\x02:\x0E\x03\x02\x02\x02;<\x071\x02\x02<\x10" +
		"\x03\x02\x02\x02=>\x07I\x02\x02>?\x07G\x02\x02?K\x07V\x02\x02@A\x07R\x02" +
		"\x02AB\x07Q\x02\x02BC\x07U\x02\x02CK\x07V\x02\x02DE\x07F\x02\x02EF\x07" +
		"G\x02\x02FG\x07N\x02\x02GH\x07G\x02\x02HI\x07V\x02\x02IK\x07G\x02\x02" +
		"J=\x03\x02\x02\x02J@\x03\x02\x02\x02JD\x03\x02\x02\x02K\x12\x03\x02\x02" +
		"\x02LM\x07}\x02\x02M\x14\x03\x02\x02\x02NO\x07\x7F\x02\x02O\x16\x03\x02" +
		"\x02\x02PQ\x07=\x02\x02Q\x18\x03\x02\x02\x02RS\x07.\x02\x02S\x1A\x03\x02" +
		"\x02\x02TV\t\x03\x02\x02UT\x03\x02\x02\x02VW\x03\x02\x02\x02WU\x03\x02" +
		"\x02\x02WX\x03\x02\x02\x02XY\x03\x02\x02\x02YZ\b\x0E\x02\x02Z\x1C\x03" +
		"\x02\x02\x02[\\\x07P\x02\x02\\]\x07w\x02\x02]^\x07o\x02\x02^_\x07d\x02" +
		"\x02_`\x07g\x02\x02`h\x07t\x02\x02ab\x07U\x02\x02bc\x07v\x02\x02cd\x07" +
		"t\x02\x02de\x07k\x02\x02ef\x07p\x02\x02fh\x07i\x02\x02g[\x03\x02\x02\x02" +
		"ga\x03\x02\x02\x02h\x1E\x03\x02\x02\x02ik\t\x04\x02\x02jl\t\x05\x02\x02" +
		"kj\x03\x02\x02\x02lm\x03\x02\x02\x02mk\x03\x02\x02\x02mn\x03\x02\x02\x02" +
		"n \x03\x02\x02\x02op\x07B\x02\x02pq\x07u\x02\x02qr\x07g\x02\x02rs\x07" +
		"t\x02\x02st\x07x\x02\x02t|\x07g\x02\x02uv\x07B\x02\x02vw\x07k\x02\x02" +
		"wx\x07p\x02\x02xy\x07r\x02\x02yz\x07w\x02\x02z|\x07v\x02\x02{o\x03\x02" +
		"\x02\x02{u\x03\x02\x02\x02|\"\x03\x02\x02\x02}\x7F\t\x06\x02\x02~}\x03" +
		"\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81\x03" +
		"\x02\x02\x02\x81$\x03\x02\x02\x02\n\x029JWgm{\x80\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TypoShieldLexer.__ATN) {
			TypoShieldLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TypoShieldLexer._serializedATN));
		}

		return TypoShieldLexer.__ATN;
	}

}

