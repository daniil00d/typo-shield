// Generated from /Users/d.shenyagin/TypoShield/src/antlr-ts-compiler/grammar/TypoShield.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class TypoShieldLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly DIR_TYPE = 2;
	public static readonly START_SYM = 3;
	public static readonly METHOD_START = 4;
	public static readonly PROTOCOL = 5;
	public static readonly PROTOCOL_VERSION = 6;
	public static readonly PROTOCOL_VERSION_DEL = 7;
	public static readonly METHOD = 8;
	public static readonly LCURLY = 9;
	public static readonly RCURLY = 10;
	public static readonly SEMI = 11;
	public static readonly COMA = 12;
	public static readonly WS = 13;
	public static readonly TYPE = 14;
	public static readonly DIR_NAME = 15;
	public static readonly DIRECTIVE = 16;
	public static readonly ENDPOINT_NAME = 17;
	public static readonly COMMENT = 18;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "DIR_TYPE", "START_SYM", "METHOD_START", "PROTOCOL", "PROTOCOL_VERSION", 
		"PROTOCOL_VERSION_DEL", "METHOD", "LCURLY", "RCURLY", "SEMI", "COMA", 
		"WS", "TYPE", "DIR_NAME", "DIRECTIVE", "ENDPOINT_NAME", "COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "':'", "'JSON'", "'>'", "'$'", "'HTTP'", undefined, "'/'", 
		undefined, "'{'", "'}'", "';'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "DIR_TYPE", "START_SYM", "METHOD_START", "PROTOCOL", 
		"PROTOCOL_VERSION", "PROTOCOL_VERSION_DEL", "METHOD", "LCURLY", "RCURLY", 
		"SEMI", "COMA", "WS", "TYPE", "DIR_NAME", "DIRECTIVE", "ENDPOINT_NAME", 
		"COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(TypoShieldLexer._LITERAL_NAMES, TypoShieldLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return TypoShieldLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(TypoShieldLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "TypoShield.g4"; }

	// @Override
	public get ruleNames(): string[] { return TypoShieldLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return TypoShieldLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return TypoShieldLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return TypoShieldLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14\x90\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\x07\x05\x07<\n\x07\x03\b\x03\b\x03\t" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x05\tM\n\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E" +
		"\x06\x0EX\n\x0E\r\x0E\x0E\x0EY\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F" +
		"\x05\x0Fj\n\x0F\x03\x10\x03\x10\x06\x10n\n\x10\r\x10\x0E\x10o\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x05\x11~\n\x11\x03\x12\x06\x12\x81\n\x12\r\x12\x0E\x12" +
		"\x82\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x07\x13\x8A\n\x13\f\x13\x0E" +
		"\x13\x8D\v\x13\x03\x13\x03\x13\x02\x02\x02\x14\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\x03\x02\b\x03\x022;\x05\x02\v\f\x0E\x0F\"\"" +
		"\x03\x02C\\\x04\x02C\\c|\x03\x02c|\x05\x02\"\"C\\c|\x02\x98\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03\'\x03\x02\x02\x02" +
		"\x05)\x03\x02\x02\x02\x07.\x03\x02\x02\x02\t0\x03\x02\x02\x02\v2\x03\x02" +
		"\x02\x02\r;\x03\x02\x02\x02\x0F=\x03\x02\x02\x02\x11L\x03\x02\x02\x02" +
		"\x13N\x03\x02\x02\x02\x15P\x03\x02\x02\x02\x17R\x03\x02\x02\x02\x19T\x03" +
		"\x02\x02\x02\x1BW\x03\x02\x02\x02\x1Di\x03\x02\x02\x02\x1Fk\x03\x02\x02" +
		"\x02!}\x03\x02\x02\x02#\x80\x03\x02\x02\x02%\x84\x03\x02\x02\x02\'(\x07" +
		"<\x02\x02(\x04\x03\x02\x02\x02)*\x07L\x02\x02*+\x07U\x02\x02+,\x07Q\x02" +
		"\x02,-\x07P\x02\x02-\x06\x03\x02\x02\x02./\x07@\x02\x02/\b\x03\x02\x02" +
		"\x0201\x07&\x02\x021\n\x03\x02\x02\x0223\x07J\x02\x0234\x07V\x02\x024" +
		"5\x07V\x02\x0256\x07R\x02\x026\f\x03\x02\x02\x0278\t\x02\x02\x0289\v\x02" +
		"\x02\x029<\t\x02\x02\x02:<\t\x02\x02\x02;7\x03\x02\x02\x02;:\x03\x02\x02" +
		"\x02<\x0E\x03\x02\x02\x02=>\x071\x02\x02>\x10\x03\x02\x02\x02?@\x07I\x02" +
		"\x02@A\x07G\x02\x02AM\x07V\x02\x02BC\x07R\x02\x02CD\x07Q\x02\x02DE\x07" +
		"U\x02\x02EM\x07V\x02\x02FG\x07F\x02\x02GH\x07G\x02\x02HI\x07N\x02\x02" +
		"IJ\x07G\x02\x02JK\x07V\x02\x02KM\x07G\x02\x02L?\x03\x02\x02\x02LB\x03" +
		"\x02\x02\x02LF\x03\x02\x02\x02M\x12\x03\x02\x02\x02NO\x07}\x02\x02O\x14" +
		"\x03\x02\x02\x02PQ\x07\x7F\x02\x02Q\x16\x03\x02\x02\x02RS\x07=\x02\x02" +
		"S\x18\x03\x02\x02\x02TU\x07.\x02\x02U\x1A\x03\x02\x02\x02VX\t\x03\x02" +
		"\x02WV\x03\x02\x02\x02XY\x03\x02\x02\x02YW\x03\x02\x02\x02YZ\x03\x02\x02" +
		"\x02Z[\x03\x02\x02\x02[\\\b\x0E\x02\x02\\\x1C\x03\x02\x02\x02]^\x07P\x02" +
		"\x02^_\x07w\x02\x02_`\x07o\x02\x02`a\x07d\x02\x02ab\x07g\x02\x02bj\x07" +
		"t\x02\x02cd\x07U\x02\x02de\x07v\x02\x02ef\x07t\x02\x02fg\x07k\x02\x02" +
		"gh\x07p\x02\x02hj\x07i\x02\x02i]\x03\x02\x02\x02ic\x03\x02\x02\x02j\x1E" +
		"\x03\x02\x02\x02km\t\x04\x02\x02ln\t\x05\x02\x02ml\x03\x02\x02\x02no\x03" +
		"\x02\x02\x02om\x03\x02\x02\x02op\x03\x02\x02\x02p \x03\x02\x02\x02qr\x07" +
		"B\x02\x02rs\x07u\x02\x02st\x07g\x02\x02tu\x07t\x02\x02uv\x07x\x02\x02" +
		"v~\x07g\x02\x02wx\x07B\x02\x02xy\x07k\x02\x02yz\x07p\x02\x02z{\x07r\x02" +
		"\x02{|\x07w\x02\x02|~\x07v\x02\x02}q\x03\x02\x02\x02}w\x03\x02\x02\x02" +
		"~\"\x03\x02\x02\x02\x7F\x81\t\x06\x02\x02\x80\x7F\x03\x02\x02\x02\x81" +
		"\x82\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83" +
		"$\x03\x02\x02\x02\x84\x85\x071\x02\x02\x85\x86\x071\x02\x02\x86\x87\x07" +
		"1\x02\x02\x87\x8B\x03\x02\x02\x02\x88\x8A\t\x07\x02\x02\x89\x88\x03\x02" +
		"\x02\x02\x8A\x8D\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8B\x8C\x03\x02" +
		"\x02\x02\x8C\x8E\x03\x02\x02\x02\x8D\x8B\x03\x02\x02\x02\x8E\x8F\b\x13" +
		"\x02\x02\x8F&\x03\x02\x02\x02\v\x02;LYio}\x82\x8B\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TypoShieldLexer.__ATN) {
			TypoShieldLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(TypoShieldLexer._serializedATN));
		}

		return TypoShieldLexer.__ATN;
	}

}

